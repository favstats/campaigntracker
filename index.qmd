---
title: ""
format:
  html:
    theme: lumen
    page-layout: full
    self-contained: true
    code-fold: true
    code-overflow: wrap
    html-math-method: mathjax
    include-after-body:
      text: |
        <script>
          document.addEventListener("DOMContentLoaded", function () {
              document.querySelectorAll("a[href='https://favstats.github.io/de25/']").forEach(function(link) {
                  link.addEventListener("click", function(event) {
                      event.preventDefault(); // Prevent default behavior
                      window.open(link.href, "_blank"); // Open in a new tab/window
                  });
              });
          });
        </script>
    includes:
      in-header: |
        <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
---

```{r setup, include=FALSE}
# dir()
# here::i_am("ep2024.Rproj")

library(tidyverse)
library(htmltools)
htmltools::tags$script(src = "https://cdn.jsdelivr.net/npm/apexcharts")
knitr::opts_chunk$set(echo = F, message = F, warning = F)

# sets <- jsonlite::fromJSON(here::here("settings.json"))




library(glue)
# write_csv(aidat, file = "../data/aidat.csv")

# transl <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1gnJk9uw4e0SGE-cNiE3IqCnB9ag6vIGGTNqjrVH90-U/edit?gid=0#gid=0")
# 
lang <- "de"

# saveRDS(transl, file = "../data/transl.rds")

transl <- readRDS( "data/transl.rds")
# get_text()

get_text <- function(thtxt, lang) {
  transl %>% filter(variable == thtxt) %>% pull(lang) 
}




```


<!-- `r get_text("landingexplore", lang)` -->

**Im KI Explorer** könnt ihr *alle erkannten KI-generierten Beiträge der Parteien* sehen und nach bestimmten Kriterien sortieren. Die Beiträge lassen sich nach **Partei, Beitragstext, Plattform, Post/Anzeige** filtern, um *spezifische Muster und Trends* sichtbar zu machen.  

Zudem können die Beitragstexte auch nach **bestimmten Wörtern** durchsucht werden.  

Über den **Link** kann der *Originalpost auf der entsprechenden Plattform* aufgerufen werden.  

```{r}
labeled <- readRDS("data/labeled.rds")  %>% 
  mutate(party = case_when(
    party == "AFD" ~ "AfD",
    party == "BüSo – Bürgerrechtsbewegung Solidarität" ~ "BüSo",
    party %in% c("CDU", "CSU") ~ "CDU/CSU",
    party %in% c("MLPD – Marxistisch-Leninistische Partei Deutschlands") ~ "MLPD",
    party %in% c("Piratenpartei Deutschland", "Piratenpartei") ~ "Piratenpartei",
    party %in% c("SSW - Südschleswiger Wählerverband") ~ "SSW",
    party %in% c("V-Partei³ - Partei für Veränderung, Vegetarier und Veganer") ~ "V-Partei³",
    str_detect(party, "ÖDP") ~ "ÖDP",
    str_detect(party, "PdF") ~ "PdF",
    T ~party
  )) %>% 
  filter(str_detect(page_name, "Stiftung", negate = T))

ai_dat <- readRDS("data/ai_dat.rds")  %>% 
  mutate(party = case_when(
    party == "AFD" ~ "AfD",
    party == "BüSo – Bürgerrechtsbewegung Solidarität" ~ "BüSo",
    party %in% c("CDU", "CSU") ~ "CDU/CSU",
    party %in% c("MLPD – Marxistisch-Leninistische Partei Deutschlands") ~ "MLPD",
    party %in% c("Piratenpartei Deutschland", "Piratenpartei") ~ "Piratenpartei",
    party %in% c("SSW - Südschleswiger Wählerverband") ~ "SSW",
    party %in% c("V-Partei³ - Partei für Veränderung, Vegetarier und Veganer") ~ "V-Partei³",
    str_detect(party, "ÖDP") ~ "ÖDP",
    str_detect(party, "PdF") ~ "PdF",
    T ~party
  ))



workwith <- labeled %>% 
  # count(ki_bild_video) %>% 
  mutate(ai = ifelse(str_detect(ki_bild_video, "Ja|es beinhaltet also sowohl KI-generierte", negate = T) | is.na(ki_bild_video), 0, 1)) %>% 
  mutate(ai_generated = ai)
  # mutate(ai = sample(c(0, 1,1,0,0), nrow(labeled), replace = T)) %>% 
  # bind_rows(
  #   ai_dat %>% mutate(ai = ifelse(ai_generated >= 0.5, 1, 0))
  # )


 # write_csv(workwith, "workwith.csv")

ai_hashes <- workwith %>% 
  select(hash, text, platform, type, ai_generated) %>% 
  filter(ai_generated >= 0.9) %>% pull(hash) 

# Step 2: Get all medication-related files
allmeds <- dir("organic", recursive = TRUE, all.files = TRUE, full.names = T) %>% 
  c(dir("paid", recursive = TRUE, all.files = TRUE, full.names = T)) %>% 
  c(dir("mnt/storage/output_frames", recursive = TRUE, all.files = TRUE, full.names = T)) %>% 
  discard(~ str_detect(.x, "vid_hash|mp4"))

# Step 3: Map AI hashes to matched medications
hhh <- map(ai_hashes, ~ allmeds[str_detect(allmeds, .x)])

# Step 4: Convert to tibble with key-value pairs
result <- tibble(ai_hash = ai_hashes, matched_meds = hhh) %>%
  unnest(matched_meds)

# Display the final tibble

# labeled

# workwith %>% 
#   select(hash, text, platform, type, ai_generated) %>% 
#   filter(ai_generated >= 0.9) %>% 
#   left_join(result %>% distinct(ai_hash, .keep_all = T) %>% rename(hash = ai_hash))
```



```{r}
# workwith %>% count(party)

# profile_handle
# Example: Print the first 10 values
# head(binary_numbers, 10)
party_data <- workwith %>%
  count(ai, party) %>%
  group_by(party) %>%
  mutate(total = sum(n)) %>%
  ungroup() %>%
  mutate(proportion = n / total * 100)

library(highcharter)


# Render both charts
# overall_chart
# Sort parties by the proportion of AI = 1 (descending)
sorted_party_data <- party_data %>%
  group_by(party) %>%
  summarize(ai_1_proportion = proportion[ai == 1]) %>%
  arrange(desc(ai_1_proportion)) %>%
  left_join(party_data, by = "party")

# Get the sorted party names
sorted_parties <- unique(sorted_party_data$party)

library(highcharter)
library(htmltools)
```

```{r}
# Install necessary packages if not already installed
if (!requireNamespace("reactable", quietly = TRUE)) {
  install.packages("reactable")
}
if (!requireNamespace("htmltools", quietly = TRUE)) {
  install.packages("htmltools")
}

# Load the required libraries
library(reactable)
library(htmltools)



# Function to embed images in table cells
embed_image <- function(image_url) {
  img(src = image_url, height = "300px", alt = "Image")  # Adjust 'height' as needed
}
# 
# rawprep %>% count(type) %>% 
#   mutate(type = case_when(
#     type == ""
#   ))


# rawprep%>%   slice(30) %>% 
#   select(Themen)
#   rowwise() %>% 
#   mutate(text = paste0(text, "\n"))
```

## Entdecken

```{r}
rawprep <- workwith %>% 
  # select(hash, text, party, platform, type, ai_generated, url) %>% 
  # filter(ai_generated >= 0.9) %>% 
  left_join(result %>% distinct(ai_hash, .keep_all = T) %>% rename(hash = ai_hash)) %>% 
  arrange(party) %>%
  filter(ai_generated == 1) %>% 
  mutate(
    detect_bild = str_detect(coalesce(ki_kennzeichnung_im_bild_video, ""), "KEINEN"),
    detect_text = str_detect(coalesce(ki_kennzeichnung_im_text_des_posts, ""), "KEINEN"),
    detect_ad   = str_detect(coalesce(ki_kennzeichnung_im_post_ad, ""), "KEINEN"),
    no_label_present = case_when(
      !detect_bild | !detect_text | !detect_ad ~ 0,
      TRUE ~ 1
    )
  ) %>% 
  mutate(platform = case_when(
    str_detect(platform, "instagram") & str_detect(platform, "facebook") ~ "Facebook + Instagram",
    str_detect(platform, "instagram") ~ "Instagram",
    str_detect(platform, "facebook") ~ "Facebook",
     T ~ platform
  )) %>% 
  mutate(type = case_when(
    type == "organic" ~ "Posts",
    type == "paid" ~ "Werbung",
    TRUE ~ type  # Falls es andere Werte gibt, bleiben sie unverändert
  )) %>% 
  mutate(rown = row_number())


# rawprep %>%
#   glimpse() %>% 
#   filter(ai_generated == 1) %>% 
#   select(positive_tendenz_tonalitat, negative_tendenz_tonalitat, themen)
# 
# rawprep  %>% 
#   filter(ai_generated == 1) %>% 
#   select(themen)
```


```{r}
library(tidyverse)

# Assuming 'rawprep' contains your data
transformed_data <- rawprep  %>%
  mutate(
    `Sonstiges Politisches Thema` = str_detect(themen, "Sonstiges Politisches Thema"),
    `Bildung und Kultur` = str_detect(themen, "Bildung und Kultur"),
    Europa = str_detect(themen, "Europa"),
    `Digitales und Infrastruktur` = str_detect(themen, "Digitales und Infrastruktur"),
    Verteidigungspolitik = str_detect(themen, "Verteidigungspolitik"),
    Energiepolitik = str_detect(themen, "Energiepolitik"),
    `Innen und Migrationspolitik` = str_detect(themen, "Migrationspolitik"),
    `Arbeit und Soziales` = str_detect(themen, "Arbeit und Soziales"),
    `Wirtschaft und Finanzen` = str_detect(themen, "Wirtschaft und Finanzen"),
    Wahlaufruf = str_detect(themen, "Wahlaufruf"),
    `Politische Parteien und Politiker:innen` = str_detect(themen, "Kandidatenvorstellung"),
    `Wahl im Generellen` = str_detect(themen, "Wahl im Generellen")
  ) %>%  # Adding Post IDs
  pivot_longer(cols = `Sonstiges Politisches Thema`:`Wahl im Generellen`, 
               names_to = "Topic", 
               values_to = "Present") %>%
  filter(Present) %>%
  group_by(rown) %>%
  summarise(Topics = list(Topic), .groups = 'drop')

# Display the transformed data
# print(transformed_data)

rawprep <- rawprep %>%
  left_join(transformed_data) %>% 
  mutate(
    text = ifelse(text == "NULL", "[Kein Text!]", text)
  ) %>% 
  rowwise() %>% 
  mutate(text = paste0(text, "\n\n--------\n\nKodierte Themen:\n", paste(unique(unlist(Topics)), collapse = "\n"))) %>% 
  ungroup()

# rawprep %>% 
#   filter(no_label_present)
```


```{r}
# Load necessary libraries
library(reactable)
library(htmltools)
library(dplyr)

# Topic color mapping
topic_colors <- c(
  "Sonstiges Politisches Thema" = "#A9A9A9",      # Gray for miscellaneous topics
  "Bildung und Kultur" = "#6B5B95",               # Purple for education/culture
  "Europa" = "#2E86C1",                           # Blue for Europe
  "Digitales und Infrastruktur" = "#17A589",     # Teal for digital/infrastructure
  "Verteidigungspolitik" = "#A93226",            # Red for defense/military
  "Energiepolitik" = "#D35400",                  # Orange for energy
  "Innen und Migrationspolitik" = "#884EA0",     # Deep purple for migration/internal affairs
  "Arbeit und Soziales" = "#F4D03F",             # Yellow for labor/social affairs
  "Wirtschaft und Finanzen" = "#1F618D",         # Dark blue for economy/finance
  "Wahlaufruf" = "#FF5733",                      # Bright red-orange for election calls
  "Kandidierendenvorstellung" = "#7DCEA0",       # Light green for candidate introductions
  "Wahl im Generellen" = "#F5B041"               # Warm yellow-orange for general elections
)

# Function to Create Colored Tags
create_tags <- function(topics) {
  tags$div(
    lapply(topics, function(topic) {
      tags$span(
        topic,
        style = paste0(
          "background-color: ", topic_colors[topic], ";",
          "color: white;",
          "padding: 4px 8px;",
          "border-radius: 4px;",
          "margin: 2px;",
          "display: inline-block;"
        )
      )
    })
  )
}

# Reactable with Colored Tags
# reactable(
#   data,
#   columns = list(
#     Post = colDef(name = "Post Title"),
#     Topics = colDef(
#       name = "Topics",
#       cell = function(value) create_tags(value),
#       html = TRUE
#     )
#   ),
#   bordered = TRUE,
#   striped = TRUE,
#   highlight = TRUE,
#   theme = reactableTheme(
#     headerStyle = list(backgroundColor = "#f8f9fa", fontWeight = "bold")
#   )
# )
```


```{r}
data2 <- rawprep %>% select(Inhalte = matched_meds, party, text, ai_generated, platform, type, url) %>% 
  arrange(party)


library(reactable)
library(htmltools)
library(dplyr)


# hashed_files/0056e9bbb2cf3325f1e29caaf135326c.jpg

saveRDS(data2, file = "data/rawprep.rds")


```

```{r}

data <- data2 %>% 
  mutate(Inhalte = paste0("https://raw.githubusercontent.com/favstats/campaigntracker/refs/heads/main/docs/explore/", Inhalte)) %>% 
  select(-ai_generated)

# data %>% 
#   filter(ur)

# data %>% 
#   as_tibble()

# data %>% View()

# data

# write_csv(data,"data/ai_explorer.csv")
```


```{r}
party_colors <- c(
  "CDU/CSU" = "#000000",       # Black
  "SPD" = "#E3000F",           # Red
  "AfD" = "#009EE0",           # Light Blue
  "FDP" = "#FFED00",           # Yellow
  "B90/GRÜNE" = "#46962B",     # Green
  "LINKE" = "#BE3075",         # Magenta
  "BSW" = "#782151",           # Dark Blue
  "Freie Wähler" = "#f6a800",  # Orange
  "DieBasis" = "#7F7F7F",      # Gray
  "Piratenpartei" = "#FF8800", # Orange
  "ÖDP" = "#00AA00",           # Dark Green
  "VOLT" = "#562883",          # Purple
  "NPD/Die Heimat" = "#8B0000",# Dark Red
  "WerteUnion" = "#004B88",     # Blue
  "MLPD" = "#FF0000",           # Bright Red
  "PdF" = "#f5a519",
  "Bayernpartei" = "#97f5fd",
  "V-Partei³" = "#9fbe15",
  "Partei der Humanisten" = "#ff00ff",
  "Die PARTEI" = "#a81e31",
  "DEMOKRATIE IN BEWEGUNG" = "#253c69",
  "NPD /Die Heimat" = "#d59e29"
)

# Creates a data list column filter for a table with the given ID
dataListFilter <- function(tableId, style = "width: 100%; height: 28px;") {
  function(values, name) {
    dataListId <- sprintf("%s-%s-list", tableId, name)
    tagList(
      tags$input(
        type = "text",
        list = dataListId,
        oninput = sprintf("Reactable.setFilter('%s', '%s', event.target.value || undefined)", tableId, name),
        "aria-label" = sprintf("Filter %s", name),
        style = style
      ),
      tags$datalist(
        id = dataListId,
        lapply(unique(values), function(value) tags$option(value = value))
      )
    )
  }
}

library(fontawesome)


reactable(
  data,
  columns = list(
    Inhalte = colDef(
      cell = function(value) {
        div(
          class = "image-cell",
          img(
            src = value, 
            style = list(
              width = "220px", 
              height = "200px",
              objectFit = "cover",
              borderRadius = "4px",
              boxShadow = "0 2px 4px rgba(0,0,0,0.1)",
              filter = ifelse(is.na(value), "grayscale(100%)", "none")
            ),
            alt = "Generated content image"
          )
        )
      },
      html = TRUE,
      name = paste0(as.character(fa("photo-film")), " Inhalte"),  # Covers images, videos, GIFs
      width = 200

    ),
    party = colDef(
      name = paste0(as.character(fa("bullhorn")), " Partei"),
      cell = function(value) {
        party_color <- as.character(party_colors[value == names(party_colors)])
        div(
          style = list(
            backgroundColor = party_color,
            color = "white",
            padding = "2px 8px",
            borderRadius = "12px",
            fontWeight = "600",
            textTransform = "uppercase",
            fontSize = "0.8em"
          ),
          value
        )
      },
      html = TRUE,
      filterable = TRUE,
      filterInput = function(values, name) {
        tags$select(
          # Set to undefined to clear the filter
          onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
          # "Alle" has an empty value to clear the filter, and is the default option
          tags$option(value = "", "Alle"),
          lapply(unique(values), tags$option),
          "aria-label" = sprintf("Filter %s", name),
          style = "width: 100%; height: 28px;"
        )
      }    ),
    text = colDef(
      name = paste0(as.character(fa("align-justify")), " Text"),
      cell = function(value) {
        short_text <- ifelse(nchar(value) > 100, paste0(substr(value, 1, 97), "..."), value)
        div(
          style = list(
            whiteSpace = "pre-wrap",
            maxHeight = "100px",
            overflow = "hidden",
            textOverflow = "ellipsis",
            lineHeight = "1.4",
            cursor = "pointer"
          ),
          onclick = sprintf("this.nextElementSibling.style.display='block'; this.style.display='none';"),
          short_text,
          div(
            style = list(
              display = "none",
              whiteSpace = "pre-wrap",
              backgroundColor = "#f8f9fa",
              padding = "8px",
              borderRadius = "4px"
            ),
            value
          )
        )
      },
      html = TRUE,
      filterable = TRUE,
      # Filter by case-insensitive text match
      filterMethod = JS("function(rows, columnId, filterValue) {
        const pattern = new RegExp(filterValue, 'i')

        return rows.filter(function(row) {
          return pattern.test(row.values[columnId])
        })
      }"),
      minWidth = 300
    ),
    # ai_generated = colDef(
    #   name = paste0(as.character(fa("robot")), " KI"),
    #   format = colFormat(percent = TRUE, digits = 1),
    #   style = function(value) {
    #     color <- ifelse(value >= 0.9, "#00C853", "#FF9800")
    #     list(color = color, fontWeight = "bold")
    #   },
    #   html = TRUE,
    # ),
    platform = colDef(
      name = paste0(as.character(fa("icons")), " Medium"),
      cell = function(value) {
        icon <- case_when(
          value == "Twitter" ~ "🐦",
          value == "Facebook" ~ "📘",
          value == "Instagram" ~ "📸",
          TRUE ~ "🌍"
        )
        paste(icon, value)
      },
      html = TRUE,
        filterable = TRUE,
      filterInput = function(values, name) {
        tags$select(
          # Set to undefined to clear the filter
          onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
          # "Alle" has an empty value to clear the filter, and is the default option
          tags$option(value = "", "Alle"),
          lapply(unique(values), tags$option),
          "aria-label" = sprintf("Filter %s", name),
          style = "width: 100%; height: 28px;"
        )
      }  
    ),
    type = colDef(
      name = paste0(as.character(fa("list")), " Typ"),
      cell = function(value) {
        badge_style <- list(
          padding = "2px 8px",
          borderRadius = "12px",
          fontSize = "0.8em",
          color = "white"
        )
        type_color <- case_when(
          value == "Posts" ~ "#2196F3",
          value == "Werbung" ~ "#4CAF50",
          value == "Story" ~ "#9C27B0",
          TRUE ~ "#607D8B"
        )
        div(style = append(badge_style, list(backgroundColor = type_color)), value)
      },
      html = TRUE,
      filterable = TRUE,
      filterInput = function(values, name) {
        tags$select(
          # Set to undefined to clear the filter
          onchange = sprintf("Reactable.setFilter('cars-select', '%s', event.target.value || undefined)", name),
          # "Alle" has an empty value to clear the filter, and is the default option
          tags$option(value = "", "Alle"),
          lapply(unique(values), tags$option),
          "aria-label" = sprintf("Filter %s", name),
          style = "width: 100%; height: 28px;"
        )
      }    ),
    # Topics = colDef(
    #   name = "Topics",
    #   cell = function(value) create_tags(value),
    #   html = TRUE
    # ),
    url = colDef(
      name = paste0(as.character(fa("link")), " Link"),
      cell = function(value) {
        htmltools::tags$a(
          href = value,
          target = "_blank",
          style = list(
            color = "#2196F3",
            textDecoration = "none",
            "&:hover" = list(textDecoration = "underline")
          ),
          "Zum Beitrag"
        )
      },
      html = TRUE,
    )
  ),
  searchable = TRUE,
  defaultPageSize = 10,
  paginationType = "numbers",
  showPageSizeOptions = TRUE,
  pageSizeOptions = c(5, 10, 15),
  bordered = TRUE,
  highlight = TRUE,
  striped = TRUE,
  theme = reactableTheme(
    color = "#333",
    backgroundColor = "#FFFFFF",
    headerStyle = list(
      backgroundColor = "#f8f9fa",
      borderBottom = "2px solid #eee",
      fontWeight = "600",
      textTransform = "uppercase"
    ),
    rowHighlightStyle = list(
      backgroundColor = "rgba(33,150,243,0.1)",
      transition = "all 0.2s ease"
    ),
    searchInputStyle = list(
      width = "100%",
      padding = "8px 12px",
      borderRadius = "4px",
      border = "1px solid #ddd"
    ),
    cellPadding = "12px 8px"
  ),
  language = reactableLang(
    searchPlaceholder = "🔍 Textsuche...",
    noData = "Keine Posts fefunden",
    pageInfo = "{rowStart} bis {rowEnd} von {rows} posts",
    pagePrevious = "← Vorherige",
    pageNext = "Nächste →"
  ),
  details = function(index) {
    htmltools::div(
      style = list(padding = "16px", backgroundColor = "#f8f9fa"),
      htmltools::tags$pre(
        style = list(whiteSpace = "pre-wrap", margin = 0),
        data$text[index]
      )
    )
  },
  elementId = "cars-select"
)

```



<br>
<center>
  <a href="https://favstats.github.io/campaigntracker">
    <img src="logobelow.png" width="50%">
  </a>
</center>
